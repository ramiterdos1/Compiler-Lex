Grammar

    0 $accept: lines $end

    1 lines: /* empty */
    2      | lines decl
    3      | lines def
    4      | lines whl
    5      | lines ifelse
    6      | lines forloop
    7      | lines func

    8 decl: iden var SEMICOLON
    9     | iden var EQUAL exp SEMICOLON

   10 funcdecl: /* empty */
   11         | iden TOKNAME
   12         | funcdecl COMMA iden TOKNAME

   13 var: TOKNAME
   14    | var COMMA TOKNAME

   15 iden: TOKINT
   16     | TOKFLOAT
   17     | TOKCHAR

   18 def: TOKNAME EQUAL exp SEMICOLON
   19    | TOKNAME optr EQUAL exp SEMICOLON

   20 exp: TOKNAME
   21    | NUMBER
   22    | exp optr NUMBER
   23    | exp optr TOKNAME

   24 optr: PLUS
   25     | MINUS
   26     | MULT
   27     | MOD
   28     | DIV

   29 cond: NOT cond
   30     | OPENPAREN cond CLOSEPAREN
   31     | TOKNAME GREATERTHAN TOKNAME
   32     | TOKNAME LESSTHAN TOKNAME
   33     | TOKNAME GREATERTHAN NUMBER
   34     | NUMBER GREATERTHAN TOKNAME
   35     | NUMBER GREATERTHAN NUMBER
   36     | TOKNAME LESSTHAN NUMBER
   37     | NUMBER LESSTHAN TOKNAME
   38     | NUMBER LESSTHAN NUMBER
   39     | TOKNAME GREATERTHANEQUAL TOKNAME
   40     | TOKNAME GREATERTHANEQUAL NUMBER
   41     | NUMBER GREATERTHANEQUAL TOKNAME
   42     | NUMBER GREATERTHANEQUAL NUMBER
   43     | TOKNAME LESSTHANEQUAL TOKNAME
   44     | TOKNAME LESSTHANEQUAL NUMBER
   45     | NUMBER LESSTHANEQUAL TOKNAME
   46     | NUMBER LESSTHANEQUAL NUMBER
   47     | TOKNAME COMPEQUAL TOKNAME
   48     | TOKNAME COMPEQUAL NUMBER
   49     | NUMBER COMPEQUAL TOKNAME
   50     | NUMBER COMPEQUAL NUMBER
   51     | TOKNAME NOTEQUAL TOKNAME
   52     | TOKNAME NOTEQUAL NUMBER
   53     | NUMBER NOTEQUAL TOKNAME
   54     | NUMBER NOTEQUAL NUMBER
   55     | TOKNAME AND TOKNAME
   56     | TOKNAME OR TOKNAME
   57     | NOT TOKNAME

   58 whl: TOKWHILE OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE

   59 ifelse: TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE
   60       | TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE TOKELSE OPENBRACE lines CLOSEBRACE

   61 forloop: TOKFOR OPENPAREN def cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE
   62        | TOKFOR OPENPAREN decl cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

   63 func: iden TOKNAME OPENPAREN funcdecl CLOSEPAREN OPENBRACE lines CLOSEBRACE


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKNAME (258) 11 12 13 14 18 19 20 23 31 32 33 34 36 37 39 40 41 43
    44 45 47 48 49 51 52 53 55 56 57 61 62 63
TOKINT (259) 15
TOKFLOAT (260) 16
TOKCHAR (261) 17
SEMICOLON (262) 8 9 18 19 61 62
COMMA (263) 12 14
EQUAL (264) 9 18 19 61 62
PLUS (265) 24
MINUS (266) 25
MULT (267) 26
MOD (268) 27
DIV (269) 28
NUMBER (270) 21 22 33 34 35 36 37 38 40 41 42 44 45 46 48 49 50 52
    53 54
AND (271) 55
OR (272) 56
NOT (273) 29 57
GREATERTHAN (274) 31 33 34 35
LESSTHAN (275) 32 36 37 38
LESSTHANEQUAL (276) 43 44 45 46
GREATERTHANEQUAL (277) 39 40 41 42
NOTEQUAL (278) 51 52 53 54
OPENPAREN (279) 30 58 59 60 61 62 63
CLOSEPAREN (280) 30 58 59 60 61 62 63
OPENBRACE (281) 58 59 60 61 62 63
CLOSEBRACE (282) 58 59 60 61 62 63
TOKWHILE (283) 58
TOKFOR (284) 61 62
TOKIF (285) 59 60
TOKELSE (286) 60
COMPEQUAL (287) 47 48 49 50


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
lines (34)
    on left: 1 2 3 4 5 6 7, on right: 0 2 3 4 5 6 7 58 59 60 61 62
    63
decl (35)
    on left: 8 9, on right: 2 62
funcdecl (36)
    on left: 10 11 12, on right: 12 63
var (37)
    on left: 13 14, on right: 8 9 14
iden (38)
    on left: 15 16 17, on right: 8 9 11 12 63
def (39)
    on left: 18 19, on right: 3 61
exp (40)
    on left: 20 21 22 23, on right: 9 18 19 22 23 61 62
optr (41)
    on left: 24 25 26 27 28, on right: 19 22 23
cond (42)
    on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
    47 48 49 50 51 52 53 54 55 56 57, on right: 29 30 58 59 60 61 62
whl (43)
    on left: 58, on right: 4
ifelse (44)
    on left: 59 60, on right: 5
forloop (45)
    on left: 61 62, on right: 6
func (46)
    on left: 63, on right: 7


state 0

    0 $accept: . lines $end

    $default  reduce using rule 1 (lines)

    lines  go to state 1


state 1

    0 $accept: lines . $end
    2 lines: lines . decl
    3      | lines . def
    4      | lines . whl
    5      | lines . ifelse
    6      | lines . forloop
    7      | lines . func

    $end      shift, and go to state 2
    TOKNAME   shift, and go to state 3
    TOKINT    shift, and go to state 4
    TOKFLOAT  shift, and go to state 5
    TOKCHAR   shift, and go to state 6
    TOKWHILE  shift, and go to state 7
    TOKFOR    shift, and go to state 8
    TOKIF     shift, and go to state 9

    decl     go to state 10
    iden     go to state 11
    def      go to state 12
    whl      go to state 13
    ifelse   go to state 14
    forloop  go to state 15
    func     go to state 16


state 2

    0 $accept: lines $end .

    $default  accept


state 3

   18 def: TOKNAME . EQUAL exp SEMICOLON
   19    | TOKNAME . optr EQUAL exp SEMICOLON

    EQUAL  shift, and go to state 17
    PLUS   shift, and go to state 18
    MINUS  shift, and go to state 19
    MULT   shift, and go to state 20
    MOD    shift, and go to state 21
    DIV    shift, and go to state 22

    optr  go to state 23


state 4

   15 iden: TOKINT .

    $default  reduce using rule 15 (iden)


state 5

   16 iden: TOKFLOAT .

    $default  reduce using rule 16 (iden)


state 6

   17 iden: TOKCHAR .

    $default  reduce using rule 17 (iden)


state 7

   58 whl: TOKWHILE . OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE

    OPENPAREN  shift, and go to state 24


state 8

   61 forloop: TOKFOR . OPENPAREN def cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE
   62        | TOKFOR . OPENPAREN decl cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    OPENPAREN  shift, and go to state 25


state 9

   59 ifelse: TOKIF . OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE
   60       | TOKIF . OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE TOKELSE OPENBRACE lines CLOSEBRACE

    OPENPAREN  shift, and go to state 26


state 10

    2 lines: lines decl .

    $default  reduce using rule 2 (lines)


state 11

    8 decl: iden . var SEMICOLON
    9     | iden . var EQUAL exp SEMICOLON
   63 func: iden . TOKNAME OPENPAREN funcdecl CLOSEPAREN OPENBRACE lines CLOSEBRACE

    TOKNAME  shift, and go to state 27

    var  go to state 28


state 12

    3 lines: lines def .

    $default  reduce using rule 3 (lines)


state 13

    4 lines: lines whl .

    $default  reduce using rule 4 (lines)


state 14

    5 lines: lines ifelse .

    $default  reduce using rule 5 (lines)


state 15

    6 lines: lines forloop .

    $default  reduce using rule 6 (lines)


state 16

    7 lines: lines func .

    $default  reduce using rule 7 (lines)


state 17

   18 def: TOKNAME EQUAL . exp SEMICOLON

    TOKNAME  shift, and go to state 29
    NUMBER   shift, and go to state 30

    exp  go to state 31


state 18

   24 optr: PLUS .

    $default  reduce using rule 24 (optr)


state 19

   25 optr: MINUS .

    $default  reduce using rule 25 (optr)


state 20

   26 optr: MULT .

    $default  reduce using rule 26 (optr)


state 21

   27 optr: MOD .

    $default  reduce using rule 27 (optr)


state 22

   28 optr: DIV .

    $default  reduce using rule 28 (optr)


state 23

   19 def: TOKNAME optr . EQUAL exp SEMICOLON

    EQUAL  shift, and go to state 32


state 24

   58 whl: TOKWHILE OPENPAREN . cond CLOSEPAREN OPENBRACE lines CLOSEBRACE

    TOKNAME    shift, and go to state 33
    NUMBER     shift, and go to state 34
    NOT        shift, and go to state 35
    OPENPAREN  shift, and go to state 36

    cond  go to state 37


state 25

   61 forloop: TOKFOR OPENPAREN . def cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE
   62        | TOKFOR OPENPAREN . decl cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    TOKNAME   shift, and go to state 3
    TOKINT    shift, and go to state 4
    TOKFLOAT  shift, and go to state 5
    TOKCHAR   shift, and go to state 6

    decl  go to state 38
    iden  go to state 39
    def   go to state 40


state 26

   59 ifelse: TOKIF OPENPAREN . cond CLOSEPAREN OPENBRACE lines CLOSEBRACE
   60       | TOKIF OPENPAREN . cond CLOSEPAREN OPENBRACE lines CLOSEBRACE TOKELSE OPENBRACE lines CLOSEBRACE

    TOKNAME    shift, and go to state 33
    NUMBER     shift, and go to state 34
    NOT        shift, and go to state 35
    OPENPAREN  shift, and go to state 36

    cond  go to state 41


state 27

   13 var: TOKNAME .
   63 func: iden TOKNAME . OPENPAREN funcdecl CLOSEPAREN OPENBRACE lines CLOSEBRACE

    OPENPAREN  shift, and go to state 42

    $default  reduce using rule 13 (var)


state 28

    8 decl: iden var . SEMICOLON
    9     | iden var . EQUAL exp SEMICOLON
   14 var: var . COMMA TOKNAME

    SEMICOLON  shift, and go to state 43
    COMMA      shift, and go to state 44
    EQUAL      shift, and go to state 45


state 29

   20 exp: TOKNAME .

    $default  reduce using rule 20 (exp)


state 30

   21 exp: NUMBER .

    $default  reduce using rule 21 (exp)


state 31

   18 def: TOKNAME EQUAL exp . SEMICOLON
   22 exp: exp . optr NUMBER
   23    | exp . optr TOKNAME

    SEMICOLON  shift, and go to state 46
    PLUS       shift, and go to state 18
    MINUS      shift, and go to state 19
    MULT       shift, and go to state 20
    MOD        shift, and go to state 21
    DIV        shift, and go to state 22

    optr  go to state 47


state 32

   19 def: TOKNAME optr EQUAL . exp SEMICOLON

    TOKNAME  shift, and go to state 29
    NUMBER   shift, and go to state 30

    exp  go to state 48


state 33

   31 cond: TOKNAME . GREATERTHAN TOKNAME
   32     | TOKNAME . LESSTHAN TOKNAME
   33     | TOKNAME . GREATERTHAN NUMBER
   36     | TOKNAME . LESSTHAN NUMBER
   39     | TOKNAME . GREATERTHANEQUAL TOKNAME
   40     | TOKNAME . GREATERTHANEQUAL NUMBER
   43     | TOKNAME . LESSTHANEQUAL TOKNAME
   44     | TOKNAME . LESSTHANEQUAL NUMBER
   47     | TOKNAME . COMPEQUAL TOKNAME
   48     | TOKNAME . COMPEQUAL NUMBER
   51     | TOKNAME . NOTEQUAL TOKNAME
   52     | TOKNAME . NOTEQUAL NUMBER
   55     | TOKNAME . AND TOKNAME
   56     | TOKNAME . OR TOKNAME

    AND               shift, and go to state 49
    OR                shift, and go to state 50
    GREATERTHAN       shift, and go to state 51
    LESSTHAN          shift, and go to state 52
    LESSTHANEQUAL     shift, and go to state 53
    GREATERTHANEQUAL  shift, and go to state 54
    NOTEQUAL          shift, and go to state 55
    COMPEQUAL         shift, and go to state 56


state 34

   34 cond: NUMBER . GREATERTHAN TOKNAME
   35     | NUMBER . GREATERTHAN NUMBER
   37     | NUMBER . LESSTHAN TOKNAME
   38     | NUMBER . LESSTHAN NUMBER
   41     | NUMBER . GREATERTHANEQUAL TOKNAME
   42     | NUMBER . GREATERTHANEQUAL NUMBER
   45     | NUMBER . LESSTHANEQUAL TOKNAME
   46     | NUMBER . LESSTHANEQUAL NUMBER
   49     | NUMBER . COMPEQUAL TOKNAME
   50     | NUMBER . COMPEQUAL NUMBER
   53     | NUMBER . NOTEQUAL TOKNAME
   54     | NUMBER . NOTEQUAL NUMBER

    GREATERTHAN       shift, and go to state 57
    LESSTHAN          shift, and go to state 58
    LESSTHANEQUAL     shift, and go to state 59
    GREATERTHANEQUAL  shift, and go to state 60
    NOTEQUAL          shift, and go to state 61
    COMPEQUAL         shift, and go to state 62


state 35

   29 cond: NOT . cond
   57     | NOT . TOKNAME

    TOKNAME    shift, and go to state 63
    NUMBER     shift, and go to state 34
    NOT        shift, and go to state 35
    OPENPAREN  shift, and go to state 36

    cond  go to state 64


state 36

   30 cond: OPENPAREN . cond CLOSEPAREN

    TOKNAME    shift, and go to state 33
    NUMBER     shift, and go to state 34
    NOT        shift, and go to state 35
    OPENPAREN  shift, and go to state 36

    cond  go to state 65


state 37

   58 whl: TOKWHILE OPENPAREN cond . CLOSEPAREN OPENBRACE lines CLOSEBRACE

    CLOSEPAREN  shift, and go to state 66


state 38

   62 forloop: TOKFOR OPENPAREN decl . cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    TOKNAME    shift, and go to state 33
    NUMBER     shift, and go to state 34
    NOT        shift, and go to state 35
    OPENPAREN  shift, and go to state 36

    cond  go to state 67


state 39

    8 decl: iden . var SEMICOLON
    9     | iden . var EQUAL exp SEMICOLON

    TOKNAME  shift, and go to state 68

    var  go to state 28


state 40

   61 forloop: TOKFOR OPENPAREN def . cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    TOKNAME    shift, and go to state 33
    NUMBER     shift, and go to state 34
    NOT        shift, and go to state 35
    OPENPAREN  shift, and go to state 36

    cond  go to state 69


state 41

   59 ifelse: TOKIF OPENPAREN cond . CLOSEPAREN OPENBRACE lines CLOSEBRACE
   60       | TOKIF OPENPAREN cond . CLOSEPAREN OPENBRACE lines CLOSEBRACE TOKELSE OPENBRACE lines CLOSEBRACE

    CLOSEPAREN  shift, and go to state 70


state 42

   63 func: iden TOKNAME OPENPAREN . funcdecl CLOSEPAREN OPENBRACE lines CLOSEBRACE

    TOKINT    shift, and go to state 4
    TOKFLOAT  shift, and go to state 5
    TOKCHAR   shift, and go to state 6

    $default  reduce using rule 10 (funcdecl)

    funcdecl  go to state 71
    iden      go to state 72


state 43

    8 decl: iden var SEMICOLON .

    $default  reduce using rule 8 (decl)


state 44

   14 var: var COMMA . TOKNAME

    TOKNAME  shift, and go to state 73


state 45

    9 decl: iden var EQUAL . exp SEMICOLON

    TOKNAME  shift, and go to state 29
    NUMBER   shift, and go to state 30

    exp  go to state 74


state 46

   18 def: TOKNAME EQUAL exp SEMICOLON .

    $default  reduce using rule 18 (def)


state 47

   22 exp: exp optr . NUMBER
   23    | exp optr . TOKNAME

    TOKNAME  shift, and go to state 75
    NUMBER   shift, and go to state 76


state 48

   19 def: TOKNAME optr EQUAL exp . SEMICOLON
   22 exp: exp . optr NUMBER
   23    | exp . optr TOKNAME

    SEMICOLON  shift, and go to state 77
    PLUS       shift, and go to state 18
    MINUS      shift, and go to state 19
    MULT       shift, and go to state 20
    MOD        shift, and go to state 21
    DIV        shift, and go to state 22

    optr  go to state 47


state 49

   55 cond: TOKNAME AND . TOKNAME

    TOKNAME  shift, and go to state 78


state 50

   56 cond: TOKNAME OR . TOKNAME

    TOKNAME  shift, and go to state 79


state 51

   31 cond: TOKNAME GREATERTHAN . TOKNAME
   33     | TOKNAME GREATERTHAN . NUMBER

    TOKNAME  shift, and go to state 80
    NUMBER   shift, and go to state 81


state 52

   32 cond: TOKNAME LESSTHAN . TOKNAME
   36     | TOKNAME LESSTHAN . NUMBER

    TOKNAME  shift, and go to state 82
    NUMBER   shift, and go to state 83


state 53

   43 cond: TOKNAME LESSTHANEQUAL . TOKNAME
   44     | TOKNAME LESSTHANEQUAL . NUMBER

    TOKNAME  shift, and go to state 84
    NUMBER   shift, and go to state 85


state 54

   39 cond: TOKNAME GREATERTHANEQUAL . TOKNAME
   40     | TOKNAME GREATERTHANEQUAL . NUMBER

    TOKNAME  shift, and go to state 86
    NUMBER   shift, and go to state 87


state 55

   51 cond: TOKNAME NOTEQUAL . TOKNAME
   52     | TOKNAME NOTEQUAL . NUMBER

    TOKNAME  shift, and go to state 88
    NUMBER   shift, and go to state 89


state 56

   47 cond: TOKNAME COMPEQUAL . TOKNAME
   48     | TOKNAME COMPEQUAL . NUMBER

    TOKNAME  shift, and go to state 90
    NUMBER   shift, and go to state 91


state 57

   34 cond: NUMBER GREATERTHAN . TOKNAME
   35     | NUMBER GREATERTHAN . NUMBER

    TOKNAME  shift, and go to state 92
    NUMBER   shift, and go to state 93


state 58

   37 cond: NUMBER LESSTHAN . TOKNAME
   38     | NUMBER LESSTHAN . NUMBER

    TOKNAME  shift, and go to state 94
    NUMBER   shift, and go to state 95


state 59

   45 cond: NUMBER LESSTHANEQUAL . TOKNAME
   46     | NUMBER LESSTHANEQUAL . NUMBER

    TOKNAME  shift, and go to state 96
    NUMBER   shift, and go to state 97


state 60

   41 cond: NUMBER GREATERTHANEQUAL . TOKNAME
   42     | NUMBER GREATERTHANEQUAL . NUMBER

    TOKNAME  shift, and go to state 98
    NUMBER   shift, and go to state 99


state 61

   53 cond: NUMBER NOTEQUAL . TOKNAME
   54     | NUMBER NOTEQUAL . NUMBER

    TOKNAME  shift, and go to state 100
    NUMBER   shift, and go to state 101


state 62

   49 cond: NUMBER COMPEQUAL . TOKNAME
   50     | NUMBER COMPEQUAL . NUMBER

    TOKNAME  shift, and go to state 102
    NUMBER   shift, and go to state 103


state 63

   31 cond: TOKNAME . GREATERTHAN TOKNAME
   32     | TOKNAME . LESSTHAN TOKNAME
   33     | TOKNAME . GREATERTHAN NUMBER
   36     | TOKNAME . LESSTHAN NUMBER
   39     | TOKNAME . GREATERTHANEQUAL TOKNAME
   40     | TOKNAME . GREATERTHANEQUAL NUMBER
   43     | TOKNAME . LESSTHANEQUAL TOKNAME
   44     | TOKNAME . LESSTHANEQUAL NUMBER
   47     | TOKNAME . COMPEQUAL TOKNAME
   48     | TOKNAME . COMPEQUAL NUMBER
   51     | TOKNAME . NOTEQUAL TOKNAME
   52     | TOKNAME . NOTEQUAL NUMBER
   55     | TOKNAME . AND TOKNAME
   56     | TOKNAME . OR TOKNAME
   57     | NOT TOKNAME .

    AND               shift, and go to state 49
    OR                shift, and go to state 50
    GREATERTHAN       shift, and go to state 51
    LESSTHAN          shift, and go to state 52
    LESSTHANEQUAL     shift, and go to state 53
    GREATERTHANEQUAL  shift, and go to state 54
    NOTEQUAL          shift, and go to state 55
    COMPEQUAL         shift, and go to state 56

    $default  reduce using rule 57 (cond)


state 64

   29 cond: NOT cond .

    $default  reduce using rule 29 (cond)


state 65

   30 cond: OPENPAREN cond . CLOSEPAREN

    CLOSEPAREN  shift, and go to state 104


state 66

   58 whl: TOKWHILE OPENPAREN cond CLOSEPAREN . OPENBRACE lines CLOSEBRACE

    OPENBRACE  shift, and go to state 105


state 67

   62 forloop: TOKFOR OPENPAREN decl cond . SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    SEMICOLON  shift, and go to state 106


state 68

   13 var: TOKNAME .

    $default  reduce using rule 13 (var)


state 69

   61 forloop: TOKFOR OPENPAREN def cond . SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    SEMICOLON  shift, and go to state 107


state 70

   59 ifelse: TOKIF OPENPAREN cond CLOSEPAREN . OPENBRACE lines CLOSEBRACE
   60       | TOKIF OPENPAREN cond CLOSEPAREN . OPENBRACE lines CLOSEBRACE TOKELSE OPENBRACE lines CLOSEBRACE

    OPENBRACE  shift, and go to state 108


state 71

   12 funcdecl: funcdecl . COMMA iden TOKNAME
   63 func: iden TOKNAME OPENPAREN funcdecl . CLOSEPAREN OPENBRACE lines CLOSEBRACE

    COMMA       shift, and go to state 109
    CLOSEPAREN  shift, and go to state 110


state 72

   11 funcdecl: iden . TOKNAME

    TOKNAME  shift, and go to state 111


state 73

   14 var: var COMMA TOKNAME .

    $default  reduce using rule 14 (var)


state 74

    9 decl: iden var EQUAL exp . SEMICOLON
   22 exp: exp . optr NUMBER
   23    | exp . optr TOKNAME

    SEMICOLON  shift, and go to state 112
    PLUS       shift, and go to state 18
    MINUS      shift, and go to state 19
    MULT       shift, and go to state 20
    MOD        shift, and go to state 21
    DIV        shift, and go to state 22

    optr  go to state 47


state 75

   23 exp: exp optr TOKNAME .

    $default  reduce using rule 23 (exp)


state 76

   22 exp: exp optr NUMBER .

    $default  reduce using rule 22 (exp)


state 77

   19 def: TOKNAME optr EQUAL exp SEMICOLON .

    $default  reduce using rule 19 (def)


state 78

   55 cond: TOKNAME AND TOKNAME .

    $default  reduce using rule 55 (cond)


state 79

   56 cond: TOKNAME OR TOKNAME .

    $default  reduce using rule 56 (cond)


state 80

   31 cond: TOKNAME GREATERTHAN TOKNAME .

    $default  reduce using rule 31 (cond)


state 81

   33 cond: TOKNAME GREATERTHAN NUMBER .

    $default  reduce using rule 33 (cond)


state 82

   32 cond: TOKNAME LESSTHAN TOKNAME .

    $default  reduce using rule 32 (cond)


state 83

   36 cond: TOKNAME LESSTHAN NUMBER .

    $default  reduce using rule 36 (cond)


state 84

   43 cond: TOKNAME LESSTHANEQUAL TOKNAME .

    $default  reduce using rule 43 (cond)


state 85

   44 cond: TOKNAME LESSTHANEQUAL NUMBER .

    $default  reduce using rule 44 (cond)


state 86

   39 cond: TOKNAME GREATERTHANEQUAL TOKNAME .

    $default  reduce using rule 39 (cond)


state 87

   40 cond: TOKNAME GREATERTHANEQUAL NUMBER .

    $default  reduce using rule 40 (cond)


state 88

   51 cond: TOKNAME NOTEQUAL TOKNAME .

    $default  reduce using rule 51 (cond)


state 89

   52 cond: TOKNAME NOTEQUAL NUMBER .

    $default  reduce using rule 52 (cond)


state 90

   47 cond: TOKNAME COMPEQUAL TOKNAME .

    $default  reduce using rule 47 (cond)


state 91

   48 cond: TOKNAME COMPEQUAL NUMBER .

    $default  reduce using rule 48 (cond)


state 92

   34 cond: NUMBER GREATERTHAN TOKNAME .

    $default  reduce using rule 34 (cond)


state 93

   35 cond: NUMBER GREATERTHAN NUMBER .

    $default  reduce using rule 35 (cond)


state 94

   37 cond: NUMBER LESSTHAN TOKNAME .

    $default  reduce using rule 37 (cond)


state 95

   38 cond: NUMBER LESSTHAN NUMBER .

    $default  reduce using rule 38 (cond)


state 96

   45 cond: NUMBER LESSTHANEQUAL TOKNAME .

    $default  reduce using rule 45 (cond)


state 97

   46 cond: NUMBER LESSTHANEQUAL NUMBER .

    $default  reduce using rule 46 (cond)


state 98

   41 cond: NUMBER GREATERTHANEQUAL TOKNAME .

    $default  reduce using rule 41 (cond)


state 99

   42 cond: NUMBER GREATERTHANEQUAL NUMBER .

    $default  reduce using rule 42 (cond)


state 100

   53 cond: NUMBER NOTEQUAL TOKNAME .

    $default  reduce using rule 53 (cond)


state 101

   54 cond: NUMBER NOTEQUAL NUMBER .

    $default  reduce using rule 54 (cond)


state 102

   49 cond: NUMBER COMPEQUAL TOKNAME .

    $default  reduce using rule 49 (cond)


state 103

   50 cond: NUMBER COMPEQUAL NUMBER .

    $default  reduce using rule 50 (cond)


state 104

   30 cond: OPENPAREN cond CLOSEPAREN .

    $default  reduce using rule 30 (cond)


state 105

   58 whl: TOKWHILE OPENPAREN cond CLOSEPAREN OPENBRACE . lines CLOSEBRACE

    $default  reduce using rule 1 (lines)

    lines  go to state 113


state 106

   62 forloop: TOKFOR OPENPAREN decl cond SEMICOLON . TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    TOKNAME  shift, and go to state 114


state 107

   61 forloop: TOKFOR OPENPAREN def cond SEMICOLON . TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    TOKNAME  shift, and go to state 115


state 108

   59 ifelse: TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE . lines CLOSEBRACE
   60       | TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE . lines CLOSEBRACE TOKELSE OPENBRACE lines CLOSEBRACE

    $default  reduce using rule 1 (lines)

    lines  go to state 116


state 109

   12 funcdecl: funcdecl COMMA . iden TOKNAME

    TOKINT    shift, and go to state 4
    TOKFLOAT  shift, and go to state 5
    TOKCHAR   shift, and go to state 6

    iden  go to state 117


state 110

   63 func: iden TOKNAME OPENPAREN funcdecl CLOSEPAREN . OPENBRACE lines CLOSEBRACE

    OPENBRACE  shift, and go to state 118


state 111

   11 funcdecl: iden TOKNAME .

    $default  reduce using rule 11 (funcdecl)


state 112

    9 decl: iden var EQUAL exp SEMICOLON .

    $default  reduce using rule 9 (decl)


state 113

    2 lines: lines . decl
    3      | lines . def
    4      | lines . whl
    5      | lines . ifelse
    6      | lines . forloop
    7      | lines . func
   58 whl: TOKWHILE OPENPAREN cond CLOSEPAREN OPENBRACE lines . CLOSEBRACE

    TOKNAME     shift, and go to state 3
    TOKINT      shift, and go to state 4
    TOKFLOAT    shift, and go to state 5
    TOKCHAR     shift, and go to state 6
    CLOSEBRACE  shift, and go to state 119
    TOKWHILE    shift, and go to state 7
    TOKFOR      shift, and go to state 8
    TOKIF       shift, and go to state 9

    decl     go to state 10
    iden     go to state 11
    def      go to state 12
    whl      go to state 13
    ifelse   go to state 14
    forloop  go to state 15
    func     go to state 16


state 114

   62 forloop: TOKFOR OPENPAREN decl cond SEMICOLON TOKNAME . EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    EQUAL  shift, and go to state 120


state 115

   61 forloop: TOKFOR OPENPAREN def cond SEMICOLON TOKNAME . EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    EQUAL  shift, and go to state 121


state 116

    2 lines: lines . decl
    3      | lines . def
    4      | lines . whl
    5      | lines . ifelse
    6      | lines . forloop
    7      | lines . func
   59 ifelse: TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE lines . CLOSEBRACE
   60       | TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE lines . CLOSEBRACE TOKELSE OPENBRACE lines CLOSEBRACE

    TOKNAME     shift, and go to state 3
    TOKINT      shift, and go to state 4
    TOKFLOAT    shift, and go to state 5
    TOKCHAR     shift, and go to state 6
    CLOSEBRACE  shift, and go to state 122
    TOKWHILE    shift, and go to state 7
    TOKFOR      shift, and go to state 8
    TOKIF       shift, and go to state 9

    decl     go to state 10
    iden     go to state 11
    def      go to state 12
    whl      go to state 13
    ifelse   go to state 14
    forloop  go to state 15
    func     go to state 16


state 117

   12 funcdecl: funcdecl COMMA iden . TOKNAME

    TOKNAME  shift, and go to state 123


state 118

   63 func: iden TOKNAME OPENPAREN funcdecl CLOSEPAREN OPENBRACE . lines CLOSEBRACE

    $default  reduce using rule 1 (lines)

    lines  go to state 124


state 119

   58 whl: TOKWHILE OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE .

    $default  reduce using rule 58 (whl)


state 120

   62 forloop: TOKFOR OPENPAREN decl cond SEMICOLON TOKNAME EQUAL . exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    TOKNAME  shift, and go to state 29
    NUMBER   shift, and go to state 30

    exp  go to state 125


state 121

   61 forloop: TOKFOR OPENPAREN def cond SEMICOLON TOKNAME EQUAL . exp CLOSEPAREN OPENBRACE lines CLOSEBRACE

    TOKNAME  shift, and go to state 29
    NUMBER   shift, and go to state 30

    exp  go to state 126


state 122

   59 ifelse: TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE .
   60       | TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE . TOKELSE OPENBRACE lines CLOSEBRACE

    TOKELSE  shift, and go to state 127

    $default  reduce using rule 59 (ifelse)


state 123

   12 funcdecl: funcdecl COMMA iden TOKNAME .

    $default  reduce using rule 12 (funcdecl)


state 124

    2 lines: lines . decl
    3      | lines . def
    4      | lines . whl
    5      | lines . ifelse
    6      | lines . forloop
    7      | lines . func
   63 func: iden TOKNAME OPENPAREN funcdecl CLOSEPAREN OPENBRACE lines . CLOSEBRACE

    TOKNAME     shift, and go to state 3
    TOKINT      shift, and go to state 4
    TOKFLOAT    shift, and go to state 5
    TOKCHAR     shift, and go to state 6
    CLOSEBRACE  shift, and go to state 128
    TOKWHILE    shift, and go to state 7
    TOKFOR      shift, and go to state 8
    TOKIF       shift, and go to state 9

    decl     go to state 10
    iden     go to state 11
    def      go to state 12
    whl      go to state 13
    ifelse   go to state 14
    forloop  go to state 15
    func     go to state 16


state 125

   22 exp: exp . optr NUMBER
   23    | exp . optr TOKNAME
   62 forloop: TOKFOR OPENPAREN decl cond SEMICOLON TOKNAME EQUAL exp . CLOSEPAREN OPENBRACE lines CLOSEBRACE

    PLUS        shift, and go to state 18
    MINUS       shift, and go to state 19
    MULT        shift, and go to state 20
    MOD         shift, and go to state 21
    DIV         shift, and go to state 22
    CLOSEPAREN  shift, and go to state 129

    optr  go to state 47


state 126

   22 exp: exp . optr NUMBER
   23    | exp . optr TOKNAME
   61 forloop: TOKFOR OPENPAREN def cond SEMICOLON TOKNAME EQUAL exp . CLOSEPAREN OPENBRACE lines CLOSEBRACE

    PLUS        shift, and go to state 18
    MINUS       shift, and go to state 19
    MULT        shift, and go to state 20
    MOD         shift, and go to state 21
    DIV         shift, and go to state 22
    CLOSEPAREN  shift, and go to state 130

    optr  go to state 47


state 127

   60 ifelse: TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE TOKELSE . OPENBRACE lines CLOSEBRACE

    OPENBRACE  shift, and go to state 131


state 128

   63 func: iden TOKNAME OPENPAREN funcdecl CLOSEPAREN OPENBRACE lines CLOSEBRACE .

    $default  reduce using rule 63 (func)


state 129

   62 forloop: TOKFOR OPENPAREN decl cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN . OPENBRACE lines CLOSEBRACE

    OPENBRACE  shift, and go to state 132


state 130

   61 forloop: TOKFOR OPENPAREN def cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN . OPENBRACE lines CLOSEBRACE

    OPENBRACE  shift, and go to state 133


state 131

   60 ifelse: TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE TOKELSE OPENBRACE . lines CLOSEBRACE

    $default  reduce using rule 1 (lines)

    lines  go to state 134


state 132

   62 forloop: TOKFOR OPENPAREN decl cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE . lines CLOSEBRACE

    $default  reduce using rule 1 (lines)

    lines  go to state 135


state 133

   61 forloop: TOKFOR OPENPAREN def cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE . lines CLOSEBRACE

    $default  reduce using rule 1 (lines)

    lines  go to state 136


state 134

    2 lines: lines . decl
    3      | lines . def
    4      | lines . whl
    5      | lines . ifelse
    6      | lines . forloop
    7      | lines . func
   60 ifelse: TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE TOKELSE OPENBRACE lines . CLOSEBRACE

    TOKNAME     shift, and go to state 3
    TOKINT      shift, and go to state 4
    TOKFLOAT    shift, and go to state 5
    TOKCHAR     shift, and go to state 6
    CLOSEBRACE  shift, and go to state 137
    TOKWHILE    shift, and go to state 7
    TOKFOR      shift, and go to state 8
    TOKIF       shift, and go to state 9

    decl     go to state 10
    iden     go to state 11
    def      go to state 12
    whl      go to state 13
    ifelse   go to state 14
    forloop  go to state 15
    func     go to state 16


state 135

    2 lines: lines . decl
    3      | lines . def
    4      | lines . whl
    5      | lines . ifelse
    6      | lines . forloop
    7      | lines . func
   62 forloop: TOKFOR OPENPAREN decl cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines . CLOSEBRACE

    TOKNAME     shift, and go to state 3
    TOKINT      shift, and go to state 4
    TOKFLOAT    shift, and go to state 5
    TOKCHAR     shift, and go to state 6
    CLOSEBRACE  shift, and go to state 138
    TOKWHILE    shift, and go to state 7
    TOKFOR      shift, and go to state 8
    TOKIF       shift, and go to state 9

    decl     go to state 10
    iden     go to state 11
    def      go to state 12
    whl      go to state 13
    ifelse   go to state 14
    forloop  go to state 15
    func     go to state 16


state 136

    2 lines: lines . decl
    3      | lines . def
    4      | lines . whl
    5      | lines . ifelse
    6      | lines . forloop
    7      | lines . func
   61 forloop: TOKFOR OPENPAREN def cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines . CLOSEBRACE

    TOKNAME     shift, and go to state 3
    TOKINT      shift, and go to state 4
    TOKFLOAT    shift, and go to state 5
    TOKCHAR     shift, and go to state 6
    CLOSEBRACE  shift, and go to state 139
    TOKWHILE    shift, and go to state 7
    TOKFOR      shift, and go to state 8
    TOKIF       shift, and go to state 9

    decl     go to state 10
    iden     go to state 11
    def      go to state 12
    whl      go to state 13
    ifelse   go to state 14
    forloop  go to state 15
    func     go to state 16


state 137

   60 ifelse: TOKIF OPENPAREN cond CLOSEPAREN OPENBRACE lines CLOSEBRACE TOKELSE OPENBRACE lines CLOSEBRACE .

    $default  reduce using rule 60 (ifelse)


state 138

   62 forloop: TOKFOR OPENPAREN decl cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE .

    $default  reduce using rule 62 (forloop)


state 139

   61 forloop: TOKFOR OPENPAREN def cond SEMICOLON TOKNAME EQUAL exp CLOSEPAREN OPENBRACE lines CLOSEBRACE .

    $default  reduce using rule 61 (forloop)
